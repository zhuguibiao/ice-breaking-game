{"version":3,"sources":["webpack:///./src/components/Search.js","webpack:///./src/pages/search.js","webpack:///./src/components/Divider.js"],"names":["Search","value","onChange","location","css","placeholder","onKeyPress","e","key","target","blur","onBlur","queryString","parseUrl","href","query","tag","trim","navigate","Divider","color","Wrapper","data","posts","allMarkdownRemark","edges","useState","filteredData","tagFilteredData","tags","state","setState","searchPost","useCallback","filter","post","searchQuery","toLowerCase","node","frontmatter","title","content","internal","includes","tagsData","result","map","i","length","j","splice","searchTags","useEffect","TagSelector","onTagClick","prev","index","Post","vertical","margin","fat","isDarkMode","useContext","ThemeContext","darkModeColor","mainColor1","mainColor2","mainColor3","whiteModeColor"],"mappings":"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","file":"component---src-pages-search-js-aa59079b8b45d922b9cb.js","sourcesContent":["import React from \"react\"\nimport tw from \"twin.macro\"\nimport queryString from \"query-string\"\nimport { AiOutlineSearch } from \"react-icons/ai\"\nimport Divider from \"./Divider\"\nimport { navigate } from \"gatsby\"\n\nconst Search = ({ value, onChange, location }) => {\n  const handlePress = (e) => {\n    if (e.key === \"Enter\") {\n      e.target.blur()\n    }\n  }\n\n  const handleBlur = (e) => {\n    const {\n      query: { query, tag },\n    } = queryString.parseUrl(location.href)\n    if (query !== value.trim())\n      if (tag && tag !== \"ALL\") {\n        navigate(`?query=${value.trim()}&tag=${tag}`)\n      } else {\n        navigate(`?query=${value.trim()}`)\n      }\n  }\n\n  return (\n    <>\n      <div css={tw`my-4 p-4 w-full`}>\n        <div css={tw`flex mb-2`}>\n          <AiOutlineSearch css={tw`text-gray-500 my-auto w-8 h-8`} />\n          <input\n            css={tw`appearance-none focus:outline-none w-full ml-2 bg-transparent placeholder-gray-600`}\n            placeholder={\"请输入\"}\n            value={value}\n            onChange={onChange}\n            onKeyPress={handlePress}\n            onBlur={handleBlur}\n          />\n        </div>\n        <Divider color />\n      </div>\n    </>\n  )\n}\n\nexport default Search\n","import React, { useState, useEffect, useCallback } from \"react\"\nimport tw from \"twin.macro\"\nimport SEO from \"../components/seo\"\nimport Layout from \"../components/layout\"\nimport { graphql } from \"gatsby\"\nimport queryString from \"query-string\"\nimport Search from \"../components/Search\"\nimport Post from \"../components/Post\"\nimport TagSelector from \"../components/TagSelector\"\n\nconst Wrapper = tw.div`w-full max-w-screen-md mx-auto`\n\nexport default ({ data, location }) => {\n  const posts = data.allMarkdownRemark.edges ? data.allMarkdownRemark.edges : []\n\n  const [state, setState] = useState({\n    query: \"\",\n    tag: \"ALL\",\n    filteredData: [],\n    tagFilteredData: [],\n    tags: [],\n  })\n\n  const onTagClick = (tag) => {\n    setState((prev) => {\n      if (tag === \"ALL\") {\n        return {\n          ...prev,\n          tag: \"ALL\",\n          filteredData: state.tagFilteredData,\n        }\n      }\n      const filteredData = state.tagFilteredData.filter((post) => {\n        const {\n          frontmatter: { tags },\n        } = post.node\n        return tags.includes(tag)\n      })\n      return {\n        ...prev,\n        tag: tag,\n        filteredData: filteredData,\n      }\n    })\n  }\n\n  const handleChange = (query) => {\n    if (query.trim() === state.query.trim()) {\n      setState({\n        ...state,\n        query,\n      })\n      return\n    }\n    searchPost(query, \"ALL\")\n  }\n\n  const searchPost = useCallback(\n    (query, tag) => {\n      if (query.trim() === \"\") {\n        setState({\n          query,\n          tag,\n          filteredData: [],\n          tags: [],\n        })\n        return\n      }\n\n      const filteredData = posts.filter((post) => {\n        const searchQuery = query.toLowerCase().trim()\n        const {\n          frontmatter: { title, tags },\n          internal: { content }\n        } = post.node\n        return (\n          (content && content.toLowerCase().includes(searchQuery)) ||\n          (title && title.toLowerCase().includes(searchQuery)) ||\n          (tags && tags.includes(searchQuery))\n        )\n      })\n\n      const searchTags = (filteredData) => {\n        var result = []\n        filteredData.map(\n          ({ node }) => (result = [...result, ...node.frontmatter.tags])\n        )\n        for (var i = 0; i < result.length; ++i) {\n          for (var j = i + 1; j < result.length; ++j) {\n            if (result[i] === result[j]) result.splice(j--, 1)\n          }\n        }\n        return result\n      }\n\n      setState(() => {\n        const tagsData = searchTags(filteredData)\n        return {\n          tag: tag,\n          query: query,\n          filteredData: filteredData,\n          tagFilteredData: filteredData,\n          tags: tagsData,\n        }\n      })\n    },\n    [posts]\n  )\n\n  useEffect(() => {\n    if (location.href) {\n      const {\n        query: { query, tag },\n      } = queryString.parseUrl(location.href)\n      searchPost(query ? query : \"\", tag ? tag : \"ALL\")\n    }\n  }, [searchPost, location.href])\n\n  return (\n    <Layout>\n      <SEO title=\"Search\" />\n      <Wrapper>\n        <Search\n          value={state.query}\n          onChange={(e) => handleChange(e.target.value)}\n          location={location}\n        />\n        <TagSelector tags={state.tags} onTagClick={onTagClick} state={state} />\n        {state.filteredData.map((post, index) => (\n          <Post post={post} key={`post_${index}`} />\n        ))}\n      </Wrapper>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { eq: false } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 100, truncate: true)\n          fields {\n            slug\n          }\n          internal {\n            content\n          }\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from \"react\"\nimport ThemeContext from \"../lib/context/ThemContext\"\nimport { darkModeColor, whiteModeColor } from \"../../them-color\"\nimport tw, { css } from \"twin.macro\"\n\nconst Divider = ({ vertical, color, margin, fat }) => {\n  const { isDarkMode } = useContext(ThemeContext)\n  return (\n    <>\n      <div\n        css={\n          vertical\n            ? [tw`h-full flex justify-center`, margin && tw`my-2`]\n            : [tw`flex justify-center`, margin && tw`mx-2`]\n        }\n      >\n        <div\n          css={[\n            tw`rounded-full`,\n            fat\n              ? vertical\n                ? tw`h-full w-1 my-auto`\n                : tw`w-full h-1`\n              : vertical\n              ? tw`h-full w-px my-auto`\n              : tw`w-full h-px`,\n            isDarkMode ? tw`bg-gray-800` : tw`bg-gray-100`,\n            color &&\n              css`\n                background: linear-gradient(\n                  ${vertical ? \"180\" : \"270\"}deg,\n                  ${isDarkMode\n                    ? darkModeColor.mainColor1 +\n                      \",\" +\n                      darkModeColor.mainColor2 +\n                      \",\" +\n                      darkModeColor.mainColor3\n                    : whiteModeColor.mainColor1 +\n                      \",\" +\n                      whiteModeColor.mainColor2 +\n                      \",\" +\n                      whiteModeColor.mainColor3}\n                );\n              `,\n          ]}\n        ></div>\n      </div>\n    </>\n  )\n}\n\nexport default Divider\n"],"sourceRoot":""}