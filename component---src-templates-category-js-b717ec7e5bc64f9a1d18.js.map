{"version":3,"sources":["webpack:///./src/templates/category.js"],"names":["Wrapper","catArr","data","location","posts","allMarkdownRemark","edges","countOfInitialPost","site","siteMetadata","configs","categoryTitle","decodeURI","pathname","split","length","trim","useCount","count","countRef","increaseCount","bottomRef","useRef","useState","tag","filteredPosts","state","setState","tags","useMemo","result","map","node","frontmatter","i","j","splice","setFilteredPosts","useCallback","undefined","filter","post","includes","useInfiniteScroll","current","useEffect","href","queryString","parseUrl","query","title","className","css","path","onTagClick","navigate","slice","index","key","ref"],"mappings":"wRAaA,IAAMA,EAAO,kI,qMAGE,sBAAyB,IAK9BC,EALQC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAChBC,EAAQF,EAAKG,kBAAkBC,MAC7BC,EAAuBL,EAAKM,KAAKC,aAAaC,QAA9CH,mBACFI,GAEEV,EAASW,UAAUT,EAASU,UAAUC,MAAM,MACpCb,EAAOc,OAAS,GAAGC,OAGnC,MAAyCC,YAASN,GAA3CO,EAAP,KAAcC,EAAd,KAAwBC,EAAxB,KACMC,EAAYC,mBAElB,EAA0BC,mBAAS,CACjCC,IAAK,MACLC,cAAerB,IAFVsB,EAAP,KAAcC,EAAd,KAKMC,EAAOC,mBAAQ,WACnB,IAAIC,EAAS,GACb1B,EAAM2B,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAAeF,EAAM,sBAAOA,GAAP,YAAkBE,EAAKC,YAAYL,UAClE,IAAK,IAAIM,EAAI,EAAGA,EAAIJ,EAAOf,SAAUmB,EACnC,IAAK,IAAIC,EAAID,EAAI,EAAGC,EAAIL,EAAOf,SAAUoB,EACnCL,EAAOI,KAAOJ,EAAOK,IAAIL,EAAOM,OAAOD,IAAK,GAGpD,OAAOL,IACN,CAAC1B,IAEEiC,EAAmBC,uBACvB,SAACd,QACae,IAARf,IAAmBA,EAAME,EAAMF,KAEjCG,EADU,QAARH,EACO,CACPA,IAAKA,EACLC,cAAerB,GAGR,CACPoB,IAAKA,EACLC,cAAerB,EAAMoC,QAAO,SAACC,GAAD,OAC1BA,EAAKT,KAAKC,YAAYL,KAAKc,SAASlB,UAK5C,CAACpB,EAAOsB,EAAMF,MAGhBmB,aAAkB,WACZvC,EAAMW,OAASI,EAASyB,QAAUrC,IACpCa,IACAiB,OAEDhB,GAkBH,OAXAwB,qBAAU,WACR,GAAI1C,EAAS2C,KAAM,CACjB,IACWtB,EACPuB,IAAYC,SAAS7C,EAAS2C,MADhCG,MAASzB,IAEPA,GACFa,EAAiBb,MAGpB,CAACrB,EAAS2C,KAAMT,IAGjB,YAAC,IAAD,KACE,YAAC,IAAD,CAAKa,MAAOvC,IACZ,YAACX,EAAD,KAEE,kBAAImD,UAAU,iBAAiBC,IAAG,GAAlC,IACIzC,IAGN,YAAC,IAAD,CAAc0C,KAAMlD,EAASU,WAC7B,YAACb,EAAD,KACE,YAAC,IAAD,CAAa4B,KAAMA,EAAM0B,WA3BZ,SAAC9B,GAClB+B,mBAAS,QAAQ/B,GACjBa,EAAiBb,IAyBoCE,MAAOA,IACxB,IAA/BA,EAAMD,cAAcV,QACnB,mBAAKqC,IAAG,GAAR,aAED1B,EAAMD,cACJ+B,MAAM,EAAGtC,EAAQX,GACjBwB,KAAI,SAACU,EAAMgB,GACV,OAAO,YAAC,IAAD,CAAMhB,KAAMA,EAAMiB,IAAG,QAAUD,QAG5C,mBAAKE,IAAKtC","file":"component---src-templates-category-js-b717ec7e5bc64f9a1d18.js","sourcesContent":["import tw from \"twin.macro\"\nimport React, { useMemo, useState, useEffect, useCallback, useRef } from \"react\"\nimport SEO from \"../components/seo\"\nimport Profile from \"../components/Profile\"\nimport Post from \"../components/Post\"\nimport Layout from \"../components/layout\"\nimport { graphql, navigate } from \"gatsby\"\nimport queryString from \"query-string\"\nimport TagSelector from \"../components/TagSelector\"\nimport useInfiniteScroll from \"../lib/hooks/useInfiniteScroll\"\nimport useCount from \"../lib/hooks/useCount\"\nimport CategoryMenu from \"../components/CategoryMenu\"\n\nconst Wrapper = tw.div`w-full max-w-screen-md mx-auto`\n\n\nexport default ({ data, location }) => {\n  const posts = data.allMarkdownRemark.edges\n  const { countOfInitialPost } = data.site.siteMetadata.configs\n  const categoryTitle = getCategory()\n  function getCategory() {\n    const catArr = decodeURI(location.pathname).split(\"/\")\n    return catArr[catArr.length - 2].trim()\n  }\n  \n  const [count, countRef, increaseCount] = useCount(categoryTitle)\n  const bottomRef = useRef()\n\n  const [state, setState] = useState({\n    tag: \"ALL\",\n    filteredPosts: posts,\n  })\n\n  const tags = useMemo(() => {\n    var result = []\n    posts.map(({ node }) => (result = [...result, ...node.frontmatter.tags]))\n    for (var i = 0; i < result.length; ++i) {\n      for (var j = i + 1; j < result.length; ++j) {\n        if (result[i] === result[j]) result.splice(j--, 1)\n      }\n    }\n    return result\n  }, [posts])\n\n  const setFilteredPosts = useCallback(\n    (tag) => {\n      if (tag === undefined) tag = state.tag\n      if (tag === \"ALL\") {\n        setState({\n          tag: tag,\n          filteredPosts: posts,\n        })\n      } else {\n        setState({\n          tag: tag,\n          filteredPosts: posts.filter((post) =>\n            post.node.frontmatter.tags.includes(tag)\n          ),\n        })\n      }\n    },\n    [posts, state.tag]\n  )\n\n  useInfiniteScroll(() => {\n    if (posts.length > countRef.current * countOfInitialPost) {\n      increaseCount()\n      setFilteredPosts()\n    }\n  }, bottomRef)\n\n  const onTagClick = (tag) => {\n    navigate(`?tag=${tag}`)\n    setFilteredPosts(tag)\n  }\n\n  useEffect(() => {\n    if (location.href) {\n      const {\n        query: { tag },\n      } = queryString.parseUrl(location.href)\n      if (tag) {\n        setFilteredPosts(tag)\n      }\n    }\n  }, [location.href, setFilteredPosts])\n\n  return (\n    <Layout>\n      <SEO title={categoryTitle} />\n      <Wrapper>\n        {/* <Profile /> */}\n        <h1 className=\"category-title\" css={tw`mt-4 px-4 text-4xl font-bold`}>\n          #{categoryTitle}\n        </h1>\n      </Wrapper>\n      <CategoryMenu path={location.pathname} />\n      <Wrapper>\n        <TagSelector tags={tags} onTagClick={onTagClick} state={state} />\n        {state.filteredPosts.length === 0 && (\n          <div css={tw`mx-4 text-xl`}>no post..</div>\n        )}\n        {state.filteredPosts\n          .slice(0, count * countOfInitialPost)\n          .map((post, index) => {\n            return <Post post={post} key={`post_${index}`} />\n          })}\n      </Wrapper>\n      <div ref={bottomRef} />\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query ($categoryRegex: String) {\n    site {\n      siteMetadata {\n        configs {\n          countOfInitialPost\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        fileAbsolutePath: { regex: $categoryRegex }\n        frontmatter: { draft: { eq: false } }\n      }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 100, truncate: true)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}